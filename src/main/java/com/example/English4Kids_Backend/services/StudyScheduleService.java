package com.example.English4Kids_Backend.services;

import com.example.English4Kids_Backend.dtos.CreateStudyScheduleRequest;
import com.example.English4Kids_Backend.entities.StudySchedule;
import com.example.English4Kids_Backend.entities.User;
import com.example.English4Kids_Backend.repositories.StudyScheduleRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class StudyScheduleService {

    private final StudyScheduleRepository studyScheduleRepository;

    private final JavaMailSender javaMailSender;

    @Scheduled(fixedRate = 10000)
    public void scheduleFixedRateTask() {
        // G·ª≠i email nh·∫Øc nh·ªü ng∆∞·ªùi d√πng tham gia l·ªãch h·ªçc
        log.info("Sending email to users for study schedule");
        // l·∫•y ra t·∫•t c·∫£ c√°c l·ªãch h·ªçc c√≥ startTime < now
        List<StudySchedule> studySchedules = studyScheduleRepository.findAllByStartTimeBefore(LocalDateTime.now());
        studySchedules.forEach(studySchedule -> {
            studySchedule.getUsers().forEach(user -> {
                // G·ª≠i email
                SimpleMailMessage message = new SimpleMailMessage();
                message.setTo(user.getEmail());
                message.setSubject("Hey " + user.getFirstName() + "! ƒê√£ ƒë·∫øn gi·ªù h·ªçc r·ªìi n√®!");
                message.setText("Hello " + user.getFirstName() + "!\n\n" +
                        "ƒê√£ ƒë·∫øn l√∫c ch√∫ng ta c√πng h·ªçc ti·∫øng Anh r·ªìi! ƒê·ª´ng ƒë·ªÉ ki·∫øn th·ª©c ch·∫°y tr·ªën nh√©, nhanh ch√≥ng ho√†n th√†nh b√†i h·ªçc n√†o! üòÑ\n\n" +
                        "M·ªói ng√†y m·ªôt ch√∫t, b·∫°n s·∫Ω gi·ªèi l√™n nhanh th√¥i. Nh·ªõ r·∫±ng ch√∫ng t√¥i lu√¥n b√™n c·∫°nh c·ªï v≈© b·∫°n.\n\n" +
                        "Ch√∫c b·∫°n h·ªçc th·∫≠t vui v√† hi·ªáu qu·∫£!");
                javaMailSender.send(message);
                log.info("Email sent to user: " + user.getEmail());
            });
            studySchedule.setStartTime(studySchedule.getStartTime().plusDays(1));
            studyScheduleRepository.save(studySchedule);
        }
        );
    }

    public StudySchedule save(CreateStudyScheduleRequest request) {
        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        // set timezone vi·ªát nam
        LocalDateTime startTime = request.getStartTime().plusHours(7);

        // ki·ªÉm tra xem n·∫øu startTime < now th√¨ set startTime + 1 ng√†y
        if (startTime.isBefore(LocalDateTime.now())) {
            startTime = startTime.plusDays(1);
        }

        List<StudySchedule> allStudySchedules = studyScheduleRepository.findAll();

        StudySchedule studySchedule = allStudySchedules.stream()
                .filter(s -> s.getUsers().contains(user))
                .findFirst()
                .orElse(null);

        if (studySchedule != null) {
            studySchedule.getUsers().remove(user);
            studyScheduleRepository.save(studySchedule);
        }

        studySchedule = studyScheduleRepository.findFirstByStartTime(startTime).orElse(null);

        if (studySchedule == null) {
            studySchedule = new StudySchedule();

            studySchedule.setStartTime(startTime);

//            studySchedule.setUsers(Collections.singletonList(user));
            studySchedule.setUsers(List.of(user));
        } else {
            studySchedule.getUsers().add(user);
        }
        return studyScheduleRepository.save(studySchedule);
    }

    public void delete(long studyScheduleId) {
        StudySchedule studySchedule = studyScheduleRepository.findById(studyScheduleId).orElse(null);
        if (studySchedule == null) {
            throw new RuntimeException("Study schedule not found");
        }

        if(studySchedule.getUsers().isEmpty()) {
            studyScheduleRepository.delete(studySchedule);
        }

        User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        studySchedule.getUsers().remove(user);
        studyScheduleRepository.save(studySchedule);
    }

}
